<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_bq1_gdy_4mb">
    <title>Quick Start</title>
    <shortdesc>In this tutorial we guide you through the process of setting up a very easy
        TokenScript and deploy it to AlphaWallet.</shortdesc>
    <conbody>
        <p>TokenScript has a lot of functionalities, but we start with an easy example: Add
            information to your token. This is not a small deal, since wallets usually don't know
            anything about a token. As you will see, this is also the starting point to create
            offchain apps for your token.</p>
        <section><title>Create your testnet token</title>
        <p>If you want a really quick start, you don't need to create your own token. Just add the
            "Coin" token on Ropsten address 0xe35FE4A1B17d50A8022078d98162DB25bC860834 to
            AlphaWallet (you can scan it from <xref
                href="https://ropsten.etherscan.io/address/0xe35FE4A1B17d50A8022078d98162DB25bC860834"
                format="html" scope="external">Etherscan</xref>). Enable "show zero balance token"
            in your settings to show it. If you need help adding the token, read this <xref
                href="guides/Miniguide-add-token-to-aw.dita">mini guide</xref>.</p>
        <p>To launch your own token we recommend to use <xref href="https://studio.ethereum.org/"
                format="html" scope="external">Ethereum studio</xref> and start with a template for
            a simple token. Then recreate the files in<xref href="https://remix.ethereum.org/"
                format="html" scope="external"> Remix</xref>, connect your wallet, get some Ropsten
            coins from a <xref href="https://faucet.ropsten.be/" format="html" scope="external"
                >faucet</xref> and deploy your smart contract. Our <xref
                href="guides/Miniguide-deploy-token-on-ropsten.dita">mini guide</xref> explains in
            detail how to do. Alternatively you can follow this <xref
                href="https://github.com/AlphaWallet/TokenScript-Examples/tree/master/tutorial"
                format="html" scope="external">more detailed tutorial</xref>.</p>
        <p>After you deployed your token on Ropsten, copy the contract address and add the token to
            AlphaWallet. </p>
        <p>At this step you have a new token in AlphaWallet. But AlphaWallet remains dumb. It can
            only send and receive the token. It doesn't know anything about it other than the
            symbol. This is what we are going to change now.</p>
        </section><section><title>Create the TokenScript files</title>
        <p>You could create the TokenScript file from scratch. To do so, you should understand the
                <xref href="BasicConcepts.dita">basic concepts</xref> and study the <xref
                href="https://github.com/AlphaWallet/TokenScript-Examples/" format="html"
                scope="external">source code of examples</xref>. </p>
        <p>But for this exercise you don't need to. You can use <xref
                href="https://alphawallet.github.io/ABI-to-TokenScript/" format="html"
                scope="external">ABI to TokenScript</xref>, a simple tool to get the TokenScript
            files from the smart contract ABI. You find the ABI either in Studio or get it from
            Etherscan.io.</p>
        <p>Now download the files in a folder on your computer and inspect them. </p>
        <p><image href="ts-folder.png" id="image_gg4_tty_4mb"/></p>
        <p>Most important is the token.xml file (here: Coin.xml). It declares the TokenScript
            structure. Also important are the JavaScript files. They contain the dynamic code for
                <xref href="ActionCard.dita">Action Cards</xref> which is executed in AlphaWallet.
            The Makefile is needed to finish the TokenScript creation.</p>
        </section><section><title>The XML file</title>
        <p>Here we will only present some parts of the XML file. To learn more about the syntax, you
            find an <xref href="elements/index.dita">overview </xref>here.</p>
        <p><b>The header</b></p>
        <p>The file header will look like this:</p>
        <p><image href="ts-xml-header.png" id="image_d3l_pry_4mb"/></p>
        <p><codeblock>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE token [
  &lt;!ENTITY style SYSTEM "shared.css">
  &lt;!ENTITY about.en SYSTEM "about.en.js">
  &lt;!ENTITY approve.en SYSTEM "approve.en.js">
  &lt;!ENTITY foryou.en SYSTEM "foryou.en.js">
]></codeblock>The
            first line declares the XML version of the document. Inside the !DOCTYPE tag you declare
            other files to use. In this case it are the JavaScript files for your Action Cards. Keep
            this in mind.</p>
        <p><b>Declare contract, network and name</b></p>
        <p>Every TokenScript file needs to contain some basic info about the token: On which network
            does it run, what is the address of its smart contract, and what is its name? This is
            declared with this code:</p>
        <p><image href="ts-xml-contract-origin.png" id="image_dmr_qry_4mb"
            /><codeblock>&lt;ts:contract interface="erc20" name="Coin">
     &lt;ts:address network="3">0xe35FE4A1B17d50A8022078d98162DB25bC860834&lt;/ts:address>&lt;/ts:contract>
&lt;ts:origins>
     &lt;ts:ethereum contract="Coin"/>
&lt;/ts:origins></codeblock></p>
        <p>As you see, the Coin token is an ERC20 smart contract. The network number 3 means that it
            is on Ropsten testnet.</p>
        <p><b>Action Cards</b></p>
        <p>Now we talk about Action Cards. This is where the fun begins and where we can enrich our
            token with information and even with applications. See how they are declared in the XML
            file:</p>
        <p><image href="ts-xml-action-card.png" id="image_nt5_rry_4mb"/></p>
        <p>The part we are interested in starts with the <codeph>&lt;ts:cards></codeph> tag and ends
            with <codeph>&lt;/ts:cards></codeph>. Inside of these tags we put the individual cards.
            In this example an Action Card is added which provides information about the
            token:<codeblock> &lt;ts:card type="action">
     &lt;ts:label>
          &lt;ts:string xml:lang="en">About this token&lt;/ts:string>
     &lt;/ts:label>
     &lt;ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
         &lt;style type="text/css">&amp;style;&lt;/style>
         &lt;script type="text/javascript">&amp;about.en;&lt;/script>
     &lt;/ts:view>
 &lt;/ts:card></codeblock></p>
        <p>The starting tag explains TokenScript that this is an Action Card. AlphaWallet will know
            how to deal with it. Inside the label tags we find the english version of what will be
            on the button to show information: "About this token". The "view" tags declare what the
            user will see. Here we place a reference to a CSS and a JavaScript file.</p>
        </section><section><title>The JavaScript file</title>
        <p>You should have two JavaScript files in your folder: about.en.js and approve.en.js. We
            ignore the approve file and open the about.en.js file to inspect it:</p>
        <p><image href="ts-javascript-ui-segment.png" id="image_h1z_sry_4mb"/></p>
        <p>The file starts with the declaration of the Token class, and ends with a web3 command. In
            this guide we only focus on one part inside the Token class - the render()
            function:<codeblock> render() {
     return`
     &lt;div class="ui container">
         &lt;div class="ui segment">
             &lt;img src="https://www.bitcoin-buch.org/bitcoin-geschichte-front-1.jpg" />
             &lt;span>&lt;bold>&lt;h1>This is the Token of Christoph!&lt;/h1>&lt;/bold>&lt;br />&lt;br />It                     is a one of the century chance to invest!&lt;/span>
         &lt;/div>
     &lt;/div>
     `;
 }</codeblock></p>
        <p>This function renders the display after the user tapped the "about the token" button.
            Inside you find some basic HTML: A div of the class "ui container", and in it a div of
            the class "ui segment". Inside this div there is a picture, a headline and a text. </p>
        </section><section><title>Add your personal note to your token</title>
        <p>Now that you know some basics about the TokenScript architecture, it is easy to add your
            own Action Card with your personal information: Create a file called hello.en.js. Copy
            the content of about.en.js in this file, change the part inside the rendered div to
            display your personal message, save it. Then open the xml file, declare your JavaScript
            file in the header, copy the Action Card for "about", put it into the Card section, and
            modify the content that it loads the hello.en.js file.</p>
      </section><section><title>Canonicalize your TokenScript</title>
        <p>We are almost here. The next step is that you have to create a canonicalized XML file
            containing all files in the folder. </p>
        <p>Thanks to Makefile the canonicalization is easy: Type "make token.canonicalized.xml" in
            the console while being in the folder with the TokenScript files, with "token" as the
            name of your token. If your system has all dependencies, you will get a file named
            "token.canonicalized.xml.TEST". Rename the file into token.canonicalized.xml.</p>
        <p>If the make commaned doesn't work, you might lack some software. You can use xmllint,
            which is available for both Ubuntu and Windows. <xref
                href="https://github.com/AlphaWallet/TokenScript-Examples/tree/master/tutorial#xmllint"
                format="html" scope="external">Here you find the commands how to install
            it</xref>.</p>
        </section><section><title>Put the TokenScript on your Smartphone</title>
        <p>Finally you need to connect your smartphone to your computer. Open the filesystem and
            navigate to the AlphaWallet folder. Now paste the token.canonicalized.xml in the
            AlphaWallet folder.</p>
        <p>For iOS you should exchange the file somehow, maybe with twitter, facebook or telegram,
            and than open it with AlphaWallet.</p>
        <p>Now start AlphaWallet and select your token. Click the […] button in the right buttom,
            select "hello" and look at the information you added. This is your first
            TokenScript.</p>
        <p>Whenever you want to change the information or add another Action Card, you can simply
            repeat the former steps.</p>
        </section><section><title>Beyond information</title>
        <p>Adding a bit of information to a token in a wallet might sound trivial. But it's no small
            deal. Common wallets don't know anything about a token, and if they do, then it is
            because the wallet developers selected a coin to add information. With AlphaWallet and
            TokenScript you can add information to any Token.</p>
        <p>It doesn't require much fantasy to imagine how this simple Action Card can become the
            base for apps. With JavaScript you are not restricted to show information. You can do
            everything JavaScript can do, and you can connect to an API to get information. If you
            know how to sign a message with a key inside TokenScript, you can even design your API
            so that it only sends information to a wallet holding a required amount of your tokens.
            You can bind any subscription based app to a token and launch it in AlphaWallet. </p></section>
    </conbody>
</concept>
