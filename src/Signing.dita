<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_mq2_zlg_nmb">
    <title>Signing a TokenScript</title>
    <shortdesc>TokenScript files are signed by the token issuer or a trusted third party, so that a
        wallet can verify the TokenScript. Learn about the underlying trust models and how to sign
        your TokenScript.</shortdesc>
    <conbody>
        <p dir="ltr" id="docs-internal-guid-1d4e618f-7fff-5cbf-a973-b4ead0df755d">The TokenScript
            files can be signed by two keys, and ideally, by both of them.<dl>
                <dlentry>
                    <dt>Reputation Key</dt>
                    <dd>Identifies who signed the tokenscript by a <term>common name</term> such as the issuer's
                        web domain name.</dd>
                </dlentry>
                <dlentry>
                    <dt><xref href="TokenScript-TrustKey.dita">Trust Key</xref></dt>
                    <dd>Trust key <b>associates a smart contract with a signer</b>, so the user
                        agent knows it's safe to use the signed TokenScript to create transactions
                        for the smart contract.</dd>
                </dlentry>
            </dl></p>
        <p dir="ltr"><keyword>Reputation key</keyword> let's user accept the TokenScript based on the reputation of the
            website or organisation. In the simpliest case, a website SSL certificate with the
            corrisponding key will do. A <xref href="https://en.wikipedia.org/wiki/Extended_Validation_Certificate" format="html" scope="external">EV certificate</xref> would be better.</p>
        <p><keyword>Trust Key</keyword> is either returned as part of the metadata of a Smart
            Contract, or, if the Smart Contract doesn't support returning such meta-data, through an
            express-of-trust transaction from the Smart Contract's deployment key.</p>
        
        <section>
            <title>Should I use one of the two types of keys, or both?</title>
            <p>We recommend you always sign with a <keyword>Reputation key</keyword>. When a user
                uses a TokenScript, his wallet displays the domain name or organisation name of the
                certificate. It's up to the user if he trusts the TokenScript.</p>
            <p>On top of that, you should sign with a <keyword>Trust key</keyword> for <i>each</i>
                Smart Contract that this TokenScript will send transaction to. It is easier to do so
                if all of the smart contracts has the same <keyword>Trust key</keyword>, so you only
                need to sign with that key. But in the event that this is not possible (e.g. the
                TokenScript accesses smart contracts produced by different teams), multiple trust
                keys might be supplied for the signing.</p>
            <p>If you leave out signing with a <keyword>Trust key</keyword> then the user-agent will
                not display a "trusted icon" when the user produces a transaction.</p>
            <p>TokenScript can't be deployment if it is unsigned. But you can debug an unsigned
                TokenScript by manually installing it to your mobile phone.</p>
        </section>
        <section><title>Does the signer need to be the smart contract author?</title>
        <p dir="ltr">Express of Trust requires to sign the files with a key associated with
            TokenScript. This can be done by the Token issuer himself with a key associated with the
            smart contract which created the token. </p>
        <p dir="ltr">But it can also be done by another party, which gained trust from the token
                issuer. This can be done by a transaction to the public key of the TokenScript
                author or by a modification of the token smart contract to return the TokenScript
                author’s key.</p>
        <p dir="ltr">It is important to be able to delegate the trust from the token issuer to other
                parties. For example, someone created a dollar token, but doesn’t want to create all
                the TokenScrips necessary. So another party can write them to cover all kinds of
                smart contracts. It would even be possible for the authors of smart contracts to
                write TokenScripts coverings their contract on behalf of token issuers.</p>
        </section>
        <section audience="implementor"><title>Signing referred resources</title>
            <p dir="ltr">Any data reference - icons, images and language packs - used by the
                TokenScript must be referred to in the <codeph>&lt;SignedInfo></codeph> section of
                the XML signature using the <codeph>&lt;Reference></codeph> element. If they don’t,
                they will not be available for the user agent. Each reference is downloaded and its
                digest verified as part of the TokenScript signature verification process. If any of
                the references fails to download or the digest doesn't match, the entire XML
                signature is considered invalid.</p></section>
    </conbody>
</concept>
