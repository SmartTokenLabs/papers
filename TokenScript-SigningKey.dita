<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_f54_yfw_qmb">
    <title>Smart Contract Trust Key</title>
    <shortdesc>The Smart Contract Trust Key (Trust-key for short) is the key explicitly trusted by
        the smart contract to sign TokenScript.</shortdesc>
    <conbody>
        <p>If a TokenScript generates a transaction to be sent to a smart contract, the smart
            contract needs to express trust towards the TokenScript's signing key, here to referred
            as "Trust Key".</p>
        <p>This mechanism is important for providing trust from a highly trusted token to a less
            trusted website. Furthermore, the trust key is  also used as a package identifier, so
            two TokenScript files that are of different package should not share the trust key.</p>
      
      <section>
        <title>Express Trust from Smart Contract to a Trust Key</title>
        <p>There are two ways to express trust from the Smart Contract to the TokenScript Key:</p>
      <ul><li>Configure the smart contract to return the fingreprint of the key - 
      A smart contract with key management feature can return the currently trusted TokenScript key through a 256-bit fingerprint.</li>
        <li>Send an Express-of-Trust transaction</li>
        </ul>
      </section>
      <section>
        <title>Use Trust Key for package management</title>
        <p>When a TokenScript is cached in a user's wallet (as apposed to being distributed and used
                in a web page), the Trust Key that signs it is used as the package ID for the
                life-cycle management purpose. That is, if a user installs a new Tokenscript file or
                file-bundled, all previously cached TokenScript signed by the same key are replaced
                by it, discarded.</p>
        </section>
      <section>
        <title>Using a trust Key as a canary</title>
        <p>Normally, a trust key should not be an asset key. Presently we restrict it to use
                secp256k1 curve to make implementation simple, therefore, it is also a valid
                Ethereum key. This key does not need to be used on the blockchain at all, and better
                not, since the life cycle of a TokenScript key is different then the life cycle of
                an Ethereum key. One might discard a TokenScript key and unawaringly lost the
                Ethers, or spent all the Ether and discard the key only to find later that it has
                other uses.</p>
            <p>However, with the use of the trust key for signing TokenScript file, you might
                intentionally keep some ether on the Ethereum address controlled by this key.
                Sometimes, in a team environment, the key might be kept in a USB stick with mutiple
                people having access to it. Should the key be leaked, an adversary would then
                proceed on robbing the money on its Ethereum address, therefore making the
                management aware that the key is leaked.</p></section>
    </conbody>
</concept>
